import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Menu;
import java.awt.MenuBar;
import java.awt.MenuItem;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.Socket;
import java.security.DigestInputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.crypto.Cipher;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.Border;

public class DataOwner implements ActionListener {
	JFrame jf;
	Container c;
	JLabel l1, l2, l3, l4, l5, l6, l7, l8, l9;
	JButton b1, b2, b3, b4, b5, b6,b2m;
	JScrollPane sp;
	JTextArea ta;
	JTextField t1, t2, t3;
	MenuBar mbr;
	Menu file;
	MenuItem item;
	Border b11, b22, b33;
	File path;
	JComboBox jb;
	Object type;
	String selItem;
	Cipher encoder;
	Key prKey;
	int rank;
	JLabel ownername;
	JTextField ownertext;
	
	public static Key pubKey;
	public Font f = new Font("Times new roman", Font.BOLD, 16);
	String keyWord = "ef50a0ef2c3e3a5fdf803ae9752c8c66";

	DataOwner() {
		jf = new JFrame("Data Owner::");
		c = jf.getContentPane();
		c.setLayout(null);
		c.setBackground(new Color(188, 100, 100));

		ownername = new JLabel("Owner Name");
		ownername.setFont(f);
		ownername.setBounds(50, 130, 120, 30);
		c.add(ownername);
		
		ownertext = new JTextField();
		ownertext.setBounds(170, 130, 120, 30);
		ownertext.setFont(f);
		c.add(ownertext);
		
		ImageIcon m = new ImageIcon("images/ss.jpg");
		l9 = new JLabel();
		l9.setIcon(m);
	
		l9.setBounds(35, 65, 700, 450);

		Border b11 = BorderFactory.createBevelBorder(0);
		l1 = new JLabel();
		l1.setBorder(b11);
		l1.setBounds(35, 165, 700, 350);

		Border b22 = BorderFactory.createBevelBorder(0);
		l2 = new JLabel();
		l2.setBorder(b22);
		

		ImageIcon banner = new ImageIcon(this.getClass().getResource("images/owner.png"));
		JLabel title = new JLabel();
		title.setIcon(banner);
		title.setBounds(0, 0, 950, 500);

		mbr = new MenuBar();
		file = new Menu("File");
		item = new MenuItem("New User");
		file.add(item);
		
		jf.setMenuBar(mbr);

		ta = new JTextArea();
		ta.setColumns(100);
		ta.setRows(100);

		sp = new JScrollPane();
		sp.setViewportView(ta);
		sp.setBounds(375, 185, 315, 250);

		b1 = new JButton("Browse");
		b2 = new JButton("Upload File ");
		
		b1.addActionListener(this);
		b2.addActionListener(this);
		b2.setBackground(Color.CYAN);
		
		b1.setBackground(Color.CYAN);
		
		item.addActionListener(this);

		b1.setBounds(50, 200, 120, 30);
		b2.setBounds(50, 300, 120, 30);

		c.add(sp);
		c.add(l1);
		
		c.add(l2);
		c.add(b1);
		c.add(b2);

		c.add(title);
		jf.setSize(950,535);
		jf.show();

	}

	public void actionPerformed(ActionEvent e) {
		String strline = "";
		Object o = e.getSource();
		if (o == item) {

			// user.setSize
		}
		if (o == b1) {
			JFileC