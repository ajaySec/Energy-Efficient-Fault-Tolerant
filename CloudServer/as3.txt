			DigestInputStream dis2 = new DigestInputStream(fis22, md);
					BufferedInputStream bis2 = new BufferedInputStream(dis2);
		 
					//Read the bis so SHA1 is auto calculated at dis
					while (true) {
						int b2 = bis2.read();
						if (b2 == -1)
							break;
					}
		 
					BigInteger bi2 = new BigInteger(md.digest());
					String  h2 = bi2.toString(16);
					System.out.println(h2);
					
					
					FileInputStream fis3 = new FileInputStream("Owner\\"+fil+"3"+".txt");//C:\java\mtechproject\cloudcomputing\pra1.txt
					byte bs3[] = new byte[fis3.available()];
					fis3.read(bs3);
					String split3 = new String(bs3);
					FileInputStream fis33 = new FileInputStream("Owner\\"+fil+"3"+".txt");
					DigestInputStream dis3 = new DigestInputStream(fis33, md);
					BufferedInputStream bis3 = new BufferedInputStream(dis3);
		 
					//Read the bis so SHA1 is auto calculated at dis
					while (true) {
						int b3 = bis3.read();
						if (b3 == -1)
							break;
					}
		 
					BigInteger bi3 = new BigInteger(md.digest());
				String h3 = bi3.toString(16);
					System.out.println(h3);
					
					
					
					
					
					
					FileInputStream fis4 = new FileInputStream("Owner\\"+fil+"4"+".txt");//C:\java\mtechproject\cloudcomputing\pra1.txt
					byte bs4[] = new byte[fis4.available()];
					fis4.read(bs4);
					String split4 = new String(bs4);
					
					FileInputStream fis44 = new FileInputStream("Owner\\"+fil+"4"+".txt");
					DigestInputStream dis4 = new DigestInputStream(fis4, md);
					BufferedInputStream bis4 = new BufferedInputStream(dis4);
		 
					//Read the bis so SHA1 is auto calculated at dis
					while (true) {
						int b4 = bis4.read();
						if (b4 == -1)
							break;
					}
		 
					BigInteger bi4 = new BigInteger(md.digest());
					String	 h4 = bi4.toString(16);
					System.out.println(h4);
					
					
					
					FileInputStream fis5 = new FileInputStream("Owner\\"+fil+"5"+".txt");//C:\java\mtechproject\cloudcomputing\pra1.txt
					byte bs5[] = new byte[fis5.available()];
					fis5.read(bs5);
					String split5 = new String(bs5);
					
					FileInputStream fis55 = new FileInputStream("Owner\\"+fil+"5"+".txt");
					DigestInputStream dis5 = new DigestInputStream(fis5, md);
					BufferedInputStream bis5 = new BufferedInputStream(dis5);
		 
					//Read the bis so SHA1 is auto calculated at dis
					while (true) {
						int b5 = bis5.read();
						if (b5 == -1)
							break;
					}
		 
					BigInteger bi5 = new BigInteger(md.digest());
					String	h5 = bi5.toString(16);
					System.out.println(h5);
					///
					Dbcon db = new Dbcon();
					Connection c2 = db.getConnection();
					Statement stmt = c2.createStatement();
					String oname = ownertext.getText();
					
					DateFormat dateFormat = new SimpleDateFormat("dd/mm/yyyy");
				       //get current date time with Date()
				       Date date = new Date();
				       
				       String tym=dateFormat.format(date);
					
					
					
					String query = "insert into owner values('"+oname+"','"+fname+"','"+secretkey+"','"+h1+"','"+h2+"','"+h3+"','"+h4+"','"+h5+"','"+tym+"')";	
					stmt.executeUpdate(query);
				
				
					Socket client = new Socket(ip,1212);
					DataOutputStream dos = new DataOutputStream(client.getOutputStream());
					
					dos.writeUTF(oname);
					dos.writeUTF(fname);
					dos.writeUTF(secretkey);
					dos.writeUTF(content);
					
					dos.writeUTF(split1);
					dos.writeUTF(split2);
					dos.writeUTF(split3);
					dos.writeUTF(split4);
					dos.writeUTF(split5);
					dos.writeUTF(h1);
					dos.writeUTF(h2);
					dos.writeUTF(h3);
					dos.writeUTF(h4);
					dos.writeUTF(h5);
					dos.writeUTF(tym);
					///////////
					
					DataInputStream dis33=new DataInputStream(cli